<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en" prefix="dc: http://purl.org/dc/elements/1.1/">
<head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Richard & Bao."/><meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"/>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="dc:creator" content="Richard & Bao" />
<meta name="dc:title" content="Ngh&#x1EC1; g&#x00EC;?" />

<title>
Ngh&#x1EC1; g&#x00EC;?
</title>

<!-- Made with executable version 7.0 Release 3 Build 0 -->

<!-- JMemory for Hot Potatoes v7 -->
<!-- Modification by Agnès Simonet, January 2020 -->
<!-- from -->
<!-- Modification Copyright (c) Michael Rottmeier, December 2003 -->
<!-- JMemory for Hot Potatoes v6 -->
<!-- http://www.teaching-tools.de.vu -->
<!-- THIS HEADER MUST STAY UN-TOUCHED -->


<style>

body{
	font-family: Geneva,Arial,sans-serif;
	background-color: #e7e7e7;
	color: #000000;
 
	margin-right: 5%;
	margin-left: 5%;
	font-size: 100%;

}

p{
	text-align: left;
	margin: 0px;
	font-size: 100%;
}

div,span,td{
	font-size: 100%;
	color: #000000;
}

div.Titles{
	padding-top: 10px;
	text-align: center;
	margin-bottom: 4px;
	color: #303030;
}

.ExerciseTitle{
	color: #303030;
	font-size: 140%;
	font-weight: bold;
}

.ExerciseSubtitle{
	color: #303030;
	font-size: 120%;
}

span.Instructions{

}

div.ExerciseText{

}

.FeedbackText{
	text-align: center;
}

div.Feedback {
	background-color: #e7e7e7;
	left: 1px;
	top: 33%;
	z-index: 1;
	border-style: solid;
	border-width: 1px;
	padding: 5px;
	text-align: center;
	color: #303030;
	position: absolute;
	display: none;
	font-size: 100%;
}

div.ExerciseDiv{
	color: #000000;
}

div.StdDiv{
	background-color: #FFFFFF;
	text-align: center;
	font-size: 80%;
	color: #000000;
	padding: 8px;
	border-style: solid;
	border-width: 1px 1px 1px 1px;
	border-color: #000000;
	margin: 1px;
	
	/*Stan Rounded corners of layout boxes */	
	border-radius: 5px;
	/*Stan Rounded corners of layout boxes END */
}

.FunctionButton {
	background-color: #008040;
	color: #000000;
	text-align: center;
	border-style: solid;
/*	border-color: #FFFFFF;*/
border-color:#008040;
	border-width: 2px;
	padding: 3px 6px 3px 6px;
	cursor: pointer;
	border-radius: 5px;
}

div.NavButtonBar{
	background-color: #008040;
	text-align: center;
	margin: 2px 0px 2px 0px;
	clear: both;
	font-size: 100%;
	/* Stan Rounded corner of Nav Bar */
	border-radius: 5px;
	/* Stan Rounded corner of Nav Bar  END */
}

div.NavButtonBar button {
	border-style: solid;
	border-color: #008040;
	background-color: #008040;
	border-width: 2px;
	padding: 2px 2px 2px 2px;
	color: #ffffff;
	cursor: pointer;	
}

a{
	color: #d5000d;
}

a:visited{
	color: #008040;
}

a:hover{
	color: #d5000d;
}

table.center {
    margin-left:auto; 
    margin-right:auto;
    border-radius: 5px;
    padding: 5px;
  }
  
td {
    border: 1px solid black;
    border-radius: 5px;
    padding: 5px;
}
</style>


<script>

//<![CDATA[

<!--


function BrowserCheck() {
	var b = navigator.appName;
	this.mac = (navigator.appVersion.indexOf('Mac') != -1);
	if (b=="Netscape") this.b = 'ns';
	else if (b=="Microsoft Internet Explorer") this.b = 'ie';
	else this.b = b;
	this.ns = (this.b == 'ns');
	this.ie = (this.b == 'ie');
	this.version = navigator.appVersion;
	if (this.b == 'ie'){
		var x = this.version.indexOf('MSIE ') + 5;
		var vnum = '';

		while ((this.version.charAt(x) > -1)&&(this.version.charAt(x) < 10)){
			vnum += this.version.charAt(x);
			x++;
		}
		this.v = parseInt(vnum);
	}
	else{
		this.v = parseInt(this.version);
	}
	if (this.ns&&(this.v == 5)){
		this.v = 6;
	}
	this.min = (this.v > 5);
}

is = new BrowserCheck();

if ((is.min == false)||(is.ie5mac)){
	alert('Your browser can\'t handle this page. You need NS6+ or IE6+ on Windows, or NS6+ on Mac.');
}


function PageDim(){
//Get the page width and height
	this.W = 600;
	this.H = 400;
	if (is.ns) this.W = window.innerWidth;
	if (is.ie) this.W = document.body.clientWidth;
	if (is.ns) this.H = window.innerHeight;
	if (is.ie) this.H = document.body.clientHeight;
}

var pg = null;



function SuppressBackspace(e){ 
	 if (is.ns) {
		thisKey = e.keyCode;
	}
	else {
		thisKey = window.event.keyCode;
	}

	var Suppress = false;

	if (thisKey == 8) {
		Suppress = true;
	}

	if (Suppress == true){
		if (is.ie){
			window.event.returnValue = false;	
			window.event.cancelBubble = true;
		}
		else{
			e.preventDefault();
		}
	}
}

var NavLightColor = '#7fbf9f';
var NavShadeColor = '#004020';
var NavBarColor = '#008040';
var FuncLightColor = '#ffffff';
var FuncShadeColor = '#7f7f7f';
var ExBGColor = '#FFFFFF';

function NavBtnOver(Btn){
	Btn.style.padding = '1px 3px 3px 1px';
	Btn.style.borderLeftColor = NavLightColor;
	Btn.style.borderTopColor = NavLightColor;
	Btn.style.borderRightColor = NavShadeColor;
	Btn.style.borderBottomColor = NavShadeColor;
}

function NavBtnOut(Btn){
	Btn.style.borderColor = NavBarColor;
	Btn.style.padding = '2px 2px 2px 2px';
}

function NavBtnDown(Btn){
	Btn.style.borderLeftColor = NavShadeColor;
	Btn.style.borderTopColor = NavShadeColor;
	Btn.style.borderRightColor = NavLightColor;
	Btn.style.borderBottomColor = NavLightColor;
	Btn.style.padding = '3px 1px 1px 3px';
}

function FuncBtnOver(Btn){
	Btn.style.padding = '2px 7px 4px 5px';
	Btn.style.borderLeftColor = FuncLightColor;
	Btn.style.borderTopColor = FuncLightColor;
	Btn.style.borderRightColor = FuncShadeColor;
	Btn.style.borderBottomColor = FuncShadeColor;
}

function FuncBtnOut(Btn){
	Btn.style.borderColor = '#FFFFFF';
	Btn.style.padding = '3px 6px 3px 6px';
}

function FuncBtnDown(Btn){
	Btn.style.borderLeftColor = FuncShadeColor;
	Btn.style.borderTopColor = FuncShadeColor;


	Btn.style.borderRightColor = FuncLightColor;
	Btn.style.borderBottomColor = FuncLightColor;
	Btn.style.padding = '4px 5px 2px 7px';
}

// VARIABLES
var PosFeedback = 'Found pairs:';
var NegFeedback = 'No, that\'s not a pair!';
var YourScoreIs = 'Your score is ';
var ExerciseTitle = 'Ngh&#x1EC1; g&#x00EC;?';
var ExerciseSubtitle = 'Memory game';
var Instructions = 'Find the pairs by listening to the Vietnamese word and matching it to the correct job card.';

var topZ = 100;

var HPNStartTime = (new Date()).getTime();
var Finished = false;
var SubmissionTimeout = 30000;
var Score = 0;
var ShowCards = false;	// matching memory

// tableau de couleurs pour pouvoir distinguer les paires
	var colorsarray = ["LightCyan","Aquamarine","LightBlue","LavenderBlush","SeaGreen","LightYellow","YellowGreen","Gold","LightSalmon","Bisque","Pink","Orange" , "Chocolate","Gainsboro","Plum","Thistle"];

// OUTPUT GOBBETS
var Exercise = '';

function StartUp(){
//IE bug avoidance -- remove bottom navbar
	if (is.ie){
		if (document.getElementById('BottomNavBar') != null){
			document.getElementById('TheBody').removeChild(document.getElementById('BottomNavBar'));
		}
	}

	if (is.ie){
		document.attachEvent('onkeydown',SuppressBackspace);
		window.attachEvent('onkeydown',SuppressBackspace);
	}
	else if (is.ns){
		window.addEventListener('keypress',SuppressBackspace,false);
	}
	


// get the type of exercise
	for (var x=0; x<D.length; x++){
		if (D[x][2] == 1){
			ShowCards = true;
			break;
			}
		}
		

		
// build and show the exercise
	BuildExercise();
	DisplayExercise(Exercise);

	if (ShowCards == true){
		for (x=0; x<M.length; x++){
			document.getElementById(x).innerHTML = M[x][0]; 
			}
		}
}
// EXERCISE BUILD ROUTINES
function BuildExercise(){

// AS : mettre les données de <div id="L_x"> <div id="R_x"> et dans les bons vieux arrays F et D
F = new Array();
D = new Array();
var num_LCard = 0;
var num_RCard = 0;
var Cards = document.querySelectorAll('div.CardStyle');
	for (var y = 0; y<Cards.length; y++){
		var idCard = Cards[y].getAttribute("id");
		// rechercher les L_y
		if (idCard.startsWith('L_') ) {
			num_LCard = idCard.substr(2);
			F[y] = new Array();
			F[y][0] = Cards[y].innerHTML;
			F[y][1] = num_LCard;
		}
		// rechercher les R_y
		if (idCard.startsWith('R_') ) {
			num_RCard = idCard.substr(2);
			D[y-F.length] = new Array();
			D[y-F.length][0] = Cards[y].innerHTML;
			D[y-F.length][1] = num_RCard;
			D[y-F.length][2] = 1;
		}
	}	
// AS : et supprimer les <div id="L_x"> <div id="R_x">
	for (var y = 0; y<Cards.length; y++){
		if (Cards[y].parentNode) {
  			Cards[y].parentNode.removeChild(Cards[y]);
		}
	}

// build the items array
	for (var x=0; x<F.length; x++){
		M[x] = new Array();
		M[x][0] = F[x][0];
		M[x][1] = new Array(x, 0);
		}

	for (var x=0; x<D.length; x++){
		M[F.length+x] = new Array();
		M[F.length+x][0] = D[x][0];
		M[F.length+x][1] = new Array(x, 0);
		}
	
	M = Shuffle(M);
	

	
// build the output		
	var Words = 0;
	var Output = '';
	var QuadratZahl = '';

	if (Math.sqrt(M.length) == Math.round(Math.sqrt(M.length))){QuadratZahl = true;}
	else{QuadratZahl = false;}

	Output += '<tr>';
	for (var y=0; y<M.length; y++){
		Output += '<td id="[MNum]" onmouseover="Highlight([MNum])" onmouseout="Unhighlight([MNum])" ';
		Output += ' onclick="CheckPair([MNum])" ';
//Output += ' onclick="CheckPair([MNum]) ; HighlightBlue([MNum]) " '; 
		Output += 'style="text-align:center;background-color:#008040;height:130px;width:170px">';
		Output += '[Content]</td>';
		Words++;
		if (QuadratZahl==true){
			if (Words == Math.sqrt(M.length)){
				Output += '</tr><tr>';
				Words = 0;
				}
			}
		if (QuadratZahl==false){
			if (Words == (Math.round(Math.sqrt(M.length)))+1){
				Output += '</tr><tr>';
				Words = 0;
				}
			}

		Output = ReplaceStuff('[Content]', '<span style="font-size:small; font-weight:bold; font-color:#303030"></span>', Output);
		Output = ReplaceStuff('[MNum]', y, Output);
		}
	Output += '</tr>';
	
	Exercise += Output;	
	Exercise = '<form name="MemoryGrid"><table class="center" border="0">' + Exercise + '</table></form>';
	if (('Check'!='')&&('Check'!=' ')){
		Exercise += '<button id="SolutionBtn" class="FunctionButton" onmouseover="FuncBtnOver(this)" onfocus="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onblur="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOver(this)" onclick="ShowSolution()">&nbsp;Check&nbsp;</button>';
		}

}

function Highlight(id){
	if (M[id][1][1] == 0){
		document.getElementById(id).style.backgroundColor = '#d5000d';
		}
}

function Unhighlight(id){
	switch (M[id][1][1]) {
		case 0 : document.getElementById(id).style.backgroundColor = '#008040'; break;//pas encore trouvée
		//case 1 : document.getElementById(id).style.backgroundColor = '#FFFFFF'; break;//trouvée
//case 1 : document.getElementById(id).style.backgroundColor = 'blue'; break;//trouvée
		}
}

function HighlightBlue(id){ 
	M[id][1][1] == 2
}
function ShowLogo(){
	var Face = '<span style="font-size:small; font-weight:bold; font-color:#303030"></span>';
	if (ShowCards == false){
		for (var x=0; x<M.length; x++){
			if (M[x][1][1] == 0){
				if (document.getElementById(x) != null){
					document.getElementById(x).innerHTML = Face;
					}
				}
			}
		}
}

function ShowSolution(){
	var Output = '<table class="center" border="0">';
	
	for (var x=0; x<F.length; x++){
		Output += '<tr>';
		Output += '<td style="text-align:center;">' + F[x][0] + '</td>';
		Output += '<td style="text-align:center;">' + D[x][0] + '</td>';
		Output += '</tr>';
		}
		
	Output += '</table>';
		
	DisplayExercise(Output);

	Finished = true;
	setTimeout('Finish()', SubmissionTimeout);
	

}

var cardno = 0;
var Pairs = 0;
var WMatches = 0; 	// stores wrong matches

function CheckPair(id){
	var color = '#FFFFFF'; // default
	document.getElementById(id).innerHTML = M[id][0]; 
//document.getElementById(id).style.backgroundColor = 'blue';// bleu quand on clique mais perdu quand on perd le focus
	var Output = '';

	if(cardno==0){
		cardno++;
		clickarray[0][0]=M[id][1][0];
		clickarray[0][1]=id;
//document.getElementById(id).style.backgroundColor = 'blue';
		return;
		}
	clickarray[1][0]=M[id][1][0];
	clickarray[1][1]=id;
	cardno=0;
//document.getElementById(id).style.backgroundColor = 'blue';

	if (clickarray[0][1] == clickarray[1][1]){ // si on clique 2 fois sur la même
		clickarray[0][0] = 0;
		clickarray[1][0] = 0;
		clickarray[0][1] = 0;
		clickarray[1][1] = 0;
		setTimeout('ShowLogo()', 1000);
		return;
		}
	
	if (clickarray[0][0]==clickarray[1][0]){ // si on a cliqué sur 2 cartes associées (paire)
		clickarray[0][0] = 0;
		clickarray[1][0] = 0;
		if ((M[(clickarray[0][1])][1][1] == 0)||(M[(clickarray[1][1])][1][1] == 0)){//si ce n'était pas une paire déjà trouvée
			Pairs++;
			M[(clickarray[0][1])][1][1] = 1;
			M[(clickarray[1][1])][1][1] = 1;
//document.getElementById(clickarray[0][1]).style.backgroundColor='blue';
//document.getElementById(clickarray[1][1]).style.backgroundColor='blue';
			}

		//document.getElementById(clickarray[0][1]).style.backgroundColor='#FFFFFF';
		//document.getElementById(clickarray[1][1]).style.backgroundColor='#FFFFFF';
		var numcolor = 0;
		var j= Math.floor(Math.random() * colorsarray.length);
			bgcolor = colorsarray[j];
console.log("j : "+j + " bgcolor : "+bgcolor)
		document.getElementById(clickarray[0][1]).style.backgroundColor=bgcolor;
		document.getElementById(clickarray[1][1]).style.backgroundColor=bgcolor;
		clickarray[0][1] = 0;
		clickarray[1][1] = 0;
								
		//Output += PosFeedback + ' ' + Pairs;
		}
		else{
			if ((M[(clickarray[0][1])][1][1] == 1)||(M[(clickarray[1][1])][1][1] == 1)){}
			else{
				WMatches++;
				clickarray[0][0] = 0;
				clickarray[1][0] = 0;
						
				setTimeout('ShowLogo()', 1000); 
						
				clickarray[0][1] = 0;
				clickarray[1][1] = 0;
				
				//Output += NegFeedback;
				//Output += '<br />' + PosFeedback + ' ' + Pairs;
				}
			}	

	if (Output == ''){		
		//Output += PosFeedback + ' ' + Pairs;
		}
	//document.getElementById('FeedbackBox').innerHTML = Output;
	
	if (Pairs == F.length){
		if (document.getElementById('SolutionBtn') != null){
			//document.getElementById('SolutionBtn').style.display = 'none';
			document.getElementById('SolutionBtn').style.display = 'inline';
			}
		Score = CalculateScore();
		//WriteFeedback(Output + '<br />' + Score + '%');
		Output += '<br />' +'BRAVO !'
		WriteFeedback(Output);
		Finished = true;
		setTimeout('Finish()', SubmissionTimeout);

	}
}

function CalculateScore(){
	var ThisScore = 0;
	var z = Pairs - WMatches;
	var s = Pairs + WMatches;
	if (z < 0){z = 0;}	
	ThisScore = Math.floor((z*100)/s);	
	return ThisScore;
}

F = new Array();
D = new Array();


M = new Array();

clickarray = new Array();
clickarray[0] = new Array(0,0);
clickarray[1] = new Array(0,0);	


// OUTPUT ROUTINES

function WriteFeedback(Feedback){
	var Output = Feedback + '<br /><br />';
	document.getElementById('FeedbackContent').innerHTML = Output;
	var FDiv = document.getElementById('FeedbackDiv');
//Calculate and set its left setting
	topZ++;
	FDiv.style.zIndex = topZ;

//Position the feedback div
	pg = new PageDim();
	FDiv.style.left = Math.floor(pg.W/3) + 'px';
	FDiv.style.width = Math.floor(pg.W/3) + 'px';
//Set the top again in case the window has been resized
	if (is.ns){
		FDiv.style.top = Math.floor(pg.H/3) + window.pageYOffset + 'px';
	}
	else{
		FDiv.style.top = Math.floor(pg.H/3) + document.body.scrollTop + 'px';
	}

//Special for IE bug -- hide all the form elements that will show through the popup
	
	FDiv.style.display = 'block';
	document.getElementById('FeedbackOKButton').focus();


}

function HideFeedback(){
	document.getElementById('FeedbackContent').innerHTML = '';
	document.getElementById('FeedbackDiv').style.display='none';

//Special for IE bug -- redisplay all the form elements hidden in WriteFeedback()
	
	FocusAButton();
	if (Finished == true){
		Finish();
	}
}

function FocusAButton(){
	if (document.getElementById('SolutionBtn') != null){
		if (document.getElementById('SolutionBtn').style.display != 'none'){
			document.getElementById('SolutionBtn').focus();
			}
	}
}

function WriteToInstructions(Feedback) {
	Feedback = '<span class="FeedbackText">' + Feedback + '</span>';
	document.getElementById('InstructionsDiv').innerHTML = Feedback;

}




function DisplayExercise(StuffToDisplay){
	document.getElementById('MatchDiv').innerHTML = StuffToDisplay;

}


// UTILITY ROUTINES
function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

function EscapeDoubleQuotes(InString){
	var Result = '';
	for (var i=0; i<InString.length; i++){
		if (InString.charAt(i) == '"'){
			Result += '&quot;';
		}
		else{
			Result += InString.charAt(i);
		}
	}
	return Result;
}

// CGI SUBMISSION ROUTINES




//-->

//]]>

</script>


</head>
<!-- <body>Fool those dumb ad-inserting ISPs</body> -->

<body onload="StartUp()" id="TheBody">

<!-- BeginTopNavButtons -->


<div class="NavButtonBar">


<button onclick="history.back(); return false;">&lt;=Back</button>






</div>


<!-- EndTopNavButtons -->

<div class="Titles">
	<span class="ExerciseTitle">Ngh&#x1EC1; g&#x00EC;?</span><br />
	<span class="ExerciseSubtitle">Memory game</span><br />
</div>



<div id="InstructionsDiv" class="StdDiv">
	Find the pairs by listening to the Vietnamese word and matching it to the correct job card.	
</div>

<div id="MainDiv" class="StdDiv">

<div id="MatchDiv" ></div>

</div>


<div class="Feedback" id="FeedbackDiv">
<div class="FeedbackText" id="FeedbackContent"></div>

<button id="FeedbackOKButton" class="FuncButton" onclick="HideFeedback(); return false;">&nbsp;OK&nbsp;</button>
</div>



<div id="L_0" class="CardStyle">doctor</div>
<div id="L_1" class="CardStyle">nurse</div>
<div id="L_2" class="CardStyle">engineer</div>
<div id="L_3" class="CardStyle">police officer</div>
<div id="L_4" class="CardStyle">student</div>
<div id="L_5" class="CardStyle">journalist</div>
<div id="L_6" class="CardStyle">singer</div>
<div id="L_7" class="CardStyle">teacher</div>
<div id="L_8" class="CardStyle">driver</div>
<div id="L_9" class="CardStyle">home duties</div>
<div id="R_0" class="CardStyle"><br /><audio controls="controls"><source src="2-1-j1.mp3" type="audio/mp3"/><br /><a href="2-1-j1.mp3" title="2-1-j1.mp3">2-1-j1.mp3</a><br /></audio> <br /></div>
<div id="R_1" class="CardStyle"><br /><audio controls="controls"><source src="2-1-j2.mp3" type="audio/mp3"/><br /><a href="2-1-j2.mp3" title="2-1-j2.mp3">2-1-j2.mp3</a><br /></audio> <br /></div>
<div id="R_2" class="CardStyle"><br /><audio controls="controls"><source src="2-1-j3.mp3" type="audio/mp3"/><br /><a href="2-1-j3.mp3" title="2-1-j3.mp3">2-1-j3.mp3</a><br /></audio> <br /></div>
<div id="R_3" class="CardStyle"><br /><audio controls="controls"><source src="2-1-j4.mp3" type="audio/mp3"/><br /><a href="2-1-j4.mp3" title="2-1-j4.mp3">2-1-j4.mp3</a><br /></audio> <br /></div>
<div id="R_4" class="CardStyle"><br /><audio controls="controls"><source src="2-1-j5.mp3" type="audio/mp3"/><br /><a href="2-1-j5.mp3" title="2-1-j5.mp3">2-1-j5.mp3</a><br /></audio> <br /></div>
<div id="R_5" class="CardStyle"><br /><audio controls="controls"><source src="2-1-j6.mp3" type="audio/mp3"/><br /><a href="2-1-j6.mp3" title="2-1-j6.mp3">2-1-j6.mp3</a><br /></audio> <br /></div>
<div id="R_6" class="CardStyle"><br /><audio controls="controls"><source src="2-1-j7.mp3" type="audio/mp3"/><br /><a href="2-1-j7.mp3" title="2-1-j7.mp3">2-1-j7.mp3</a><br /></audio> <br /></div>
<div id="R_7" class="CardStyle"><br /><audio controls="controls"><source src="2-1-j8.mp3" type="audio/mp3"/><br /><a href="2-1-j8.mp3" title="2-1-j8.mp3">2-1-j8.mp3</a><br /></audio> <br /></div>
<div id="R_8" class="CardStyle"><br /><audio controls="controls"><source src="2-1-j9.mp3" type="audio/mp3"/><br /><a href="2-1-j9.mp3" title="2-1-j9.mp3">2-1-j9.mp3</a><br /></audio> <br /></div>
<div id="R_9" class="CardStyle"><br /><audio controls="controls"><source src="2-1-j10.mp3" type="audio/mp3"/><br /><a href="2-1-j10.mp3" title="2-1-j10.mp3">2-1-j10.mp3</a><br /></audio> <br /></div>


<!-- BeginBottomNavButtons -->


<div class="NavButtonBar" id="BottomNavBar">


<button  onclick="history.back(); return false;">&lt;=Back</button>






</div>


<!-- EndBottomNavButtons -->

<!-- BeginSubmissionForm -->

<!-- EndSubmissionForm -->
</body>

</html>
